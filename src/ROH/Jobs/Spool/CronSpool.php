<?php

namespace ROH\Jobs\Spool;

use ROH\Jobs\Spool;

use Cron\CronExpression;

class CronSpool extends Spool
{
    protected $entries = null;

    public function __construct($options)
    {
        parent::__construct($options);

    }

    public function find()
    {
        if (is_null($this->entries)) {

            $entries = array();

            exec('crontab -l', $result, $code);

            foreach ($result as $line) {
                // # m h  dom mon dow   command
                $line = trim($line);
                if (!$line || $line[0] == '#') {
                    continue;
                }

                $expression = implode(' ', array_slice(preg_split('/\s/', $line), 0, 5));
                $cron = CronExpression::factory($expression);

                $pos = strlen($expression);

                $lineWithoutExp = trim(substr($line, $pos));
                $exploded = explode('#', $lineWithoutExp, 2);
                $command = trim($exploded[0]);

                $working_dir = $stdout = $stderr = '';

                $splitted = explode('&&', $command, 2);
                if (strpos($command, 'cd ') === 0) {
                    $working_dir = trim(substr($splitted[0], 3));
                    if ($working_dir[0] === '"' || $working_dir[0] === "'") {
                        $working_dir = substr($working_dir, 1, strlen($working_dir) - 2);
                    }
                    $command = trim($splitted[1]);
                }

                $errPos = strpos($command, '2>>');
                if ($errPos !== false) {
                    $stderr = substr($command, $errPos);
                    preg_match('/(2>>(((?!>).)*))(:?>>)*/', $stderr, $matches);
                    $stderr = trim($matches[2]);
                    if ($stderr && ($stderr[0] === '"' || $stderr[0] === "'")) {
                        $stderr = substr($stderr, 1, strlen($stderr) - 2);
                    }

                    if ($stderr === '/dev/null') {
                        $stderr = '';
                    }
                    $command = trim(str_replace($matches[1], '', $command));
                }

                $outPos = strpos($command, '>>');
                if ($outPos !== false) {
                    $stdout = substr($command, $outPos);
                    preg_match('/(>>(((?!>).)*))(:?2>>)*/', $stdout, $matches);
                    $stdout = trim($matches[2]);

                    if ($stdout && ($stdout[0] === '"' || $stdout[0] === "'")) {
                        $stdout = substr($stdout, 1, strlen($stdout) - 2);
                    }

                    if ($stdout === '/dev/null') {
                        $stdout = '';
                    }
                    $command = trim(str_replace($matches[1], '', $command));
                }

                if (isset($exploded[1])) {
                    $name = trim($exploded[1]);
                } else {
                    $name = '';
                }

                $tmpEntry = array(
                    'name' => $name,
                    'line' => $line,
                    'expression' => $expression,
                    'command' => $command,
                    'working_dir' => $working_dir,
                    'stdout' => $stdout,
                    'stderr' => $stderr,
                    'next_run' => $cron->getNextRunDate(),
                    // 'last_run' => $cron->getPreviousRunDate(),
                );
                $tmpEntry['$id'] = $this->hashId($tmpEntry);

                $entries[] = $tmpEntry;

            }

            $this->entries = $entries;
        }

        return $this->entries;
    }

    public function findOne($id)
    {
        // $id = str_replace(' ', '+', $id);

        foreach ($this->find() as $key => $value) {
            if ($value['$id'] === $id) {
                return $value;
            }
        }
    }

    public function getContent()
    {
        $this->find();

        $content = array(
            '# This crontab is generated by ROH\Jobs lib',
            '',
            '# m h  dom mon dow   command',
        );
        foreach ($this->entries as $entry) {
            $content[] = $entry['line'].' # '.$entry['name'];
        }

        return implode("\n", $content)."\n";

    }

    public function persist()
    {
        $fn = tempnam('/tmp', 'cron-spool-');
        if ($fn) {
            $f = fopen($fn, 'w+');
            if ($f) {
                fwrite($f, $this->getContent());
                exec('crontab "'.$fn.'"', $result, $code);
            }
            @unlink($fn);
        }
    }

    public function create($entry)
    {
        $cron = CronExpression::factory($entry['expression']);
        $entry['expression'] = $cron->__toString();

        if (empty($entry['working_dir'])) {
            $entry['line'] = $entry['expression'].' ';
        } else {
            $entry['line'] = $entry['expression'].' cd "'.$entry['working_dir'].'" && ';
        }

        $entry['line'] .= $entry['command'];

        if (empty($entry['stdout'])) {
            $entry['line'] .= ' >> /dev/null';
        } else {
            $entry['line'] .= ' >> "'.$entry['stdout'].'"';
        }

        if (empty($entry['stderr'])) {
            $entry['line'] .= ' 2>> /dev/null';
        } else {
            $entry['line'] .= ' 2>> "'.$entry['stderr'].'"';
        }

        $entry['$id'] = $this->hashId($entry);

        $this->find();

        $this->entries[] = $entry;

        $this->persist();
    }

    public function update($id, $formEntry)
    {
        // $id = str_replace(' ', '+', $id);

        $this->find();

        $found = false;
        foreach ($this->entries as $key => &$entry) {
            if ($entry['$id'] === $id) {
                foreach ($formEntry as $k => $v) {
                    $entry[$k] = $v;
                }

                $cron = CronExpression::factory($entry['expression']);
                $entry['expression'] = $cron->__toString();

                if (empty($entry['working_dir'])) {
                    $entry['line'] = $entry['expression'].' ';
                } else {
                    $entry['line'] = $entry['expression'].' cd "'.$entry['working_dir'].'" && ';
                }

                $entry['line'] .= $entry['command'];

                if (empty($entry['stdout'])) {
                    $entry['line'] .= ' >> /dev/null';
                } else {
                    $entry['line'] .= ' >> "'.$entry['stdout'].'"';
                }

                if (empty($entry['stderr'])) {
                    $entry['line'] .= ' 2>> /dev/null';
                } else {
                    $entry['line'] .= ' 2>> "'.$entry['stderr'].'"';
                }

                $entry['$id'] = $this->hashId($entry);

                $found = true;

                break;
            }
        }

        if (!$found) {
            throw new \Exception('Job not found');
        }

        $this->persist();
    }

    public function remove($id)
    {
        // $id = str_replace(' ', '+', $id);

        $this->find();

        $entries = array();

        foreach ($this->entries as $key => $value) {
            if ($value['$id'] !== $id) {
                $entries[] = $value;
            }
        }

        $this->entries = $entries;

        $this->persist();
    }

    public function hashId($entry)
    {
        // base64_encode(
        return sha1($entry['expression'].'.'.$entry['working_dir'].'.'.$entry['command']);
    }
}
